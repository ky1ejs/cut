// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------
// User
// -----------------------------------------------------------
model User {
  id        String      @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  Device    Device[]
  WatchList WatchList[]
}

model Device {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionId String   @unique @default(dbgenerated("gen_random_uuid()"))
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

// -----------------------------------------------------------
// Watch List
// -----------------------------------------------------------
model WatchList {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  movieId   String
  movie     Movie    @relation(fields: [movieId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([movieId, userId])
}

// -----------------------------------------------------------
// Movie metadata
// -----------------------------------------------------------
model Movie {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  releaseDate      DateTime? @db.Date
  originalLanguage String
  originalTitle    String
  synopsis         String

  mainGenreId Int?
  mainGenre   Genre? @relation(fields: [mainGenreId], references: [id])

  // Providers
  tmdbId     Int?    @unique
  imdbId     String? @unique
  fandangoId String? @unique

  // Relations
  images           MovieImage[]
  WatchList        WatchList[]
  MovieTranslation MovieTranslation[]
  MovieCollection  MovieCollection[]
  genres           MovieGenre[]
}

model MovieTranslation {
  id                 String   @id @default(dbgenerated("gen_random_uuid()"))
  title              String
  synopsis           String
  language_ISO_639_1 String
  country_ISO_3166_1 String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  movieId            String
  movie              Movie    @relation(fields: [movieId], references: [id])
}

model MovieGenre {
  id      String @id @default(dbgenerated("gen_random_uuid()"))
  movieId String
  genreId Int
  movie   Movie  @relation(fields: [movieId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([movieId, genreId])
}

enum ImageType {
  POSTER
  BACKDROP
  STILL
}

model MovieImage {
  id                 String    @id @default(dbgenerated("gen_random_uuid()"))
  url                String    @unique
  type               ImageType
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  language_ISO_639_1 String
  country_ISO_3166_1 String

  movieId String
  movie   Movie  @relation(fields: [movieId], references: [id])
}

model Genre {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tmdbId Int? @unique

  MovieGenre MovieGenre[]
  locales    LocalizedGenre[]
  mainMovies Movie[]
}

model LocalizedGenre {
  id                 String   @id @default(dbgenerated("gen_random_uuid()"))
  genreId            Int
  language_ISO_639_1 String
  country_ISO_3166_1 String
  name               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  genre              Genre    @relation(fields: [genreId], references: [id])

  @@unique([genreId, language_ISO_639_1, country_ISO_3166_1])
}

enum CollectionType {
  POPULAR
  TOP_RATED
  UPCOMING
  NOW_PLAYING
  TRENDING_DAILY
  TRENDING_WEEKLY
}

model MovieCollection {
  id        String         @id @default(dbgenerated("gen_random_uuid()"))
  type      CollectionType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  movieId   String
  movie     Movie          @relation(fields: [movieId], references: [id])

  @@unique([type, movieId])
}
