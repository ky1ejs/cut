// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------
// User
// -----------------------------------------------------------
model User {
  id        String      @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  Device    Device[]
  WatchList WatchList[]
}

model Device {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionId String   @unique @default(dbgenerated("gen_random_uuid()"))
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

// -----------------------------------------------------------
// Watch List
// -----------------------------------------------------------
model WatchList {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  movieId   String
  movie     Movie    @relation(fields: [movieId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([movieId, userId])
}

// -----------------------------------------------------------
// Movie metadata
// -----------------------------------------------------------
model Movie {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  releaseDate      DateTime? @db.Date
  originalLanguage String
  originalTitle    String
  synopsis         String

  mainGenreId Int?
  mainGenre   Genre? @relation(fields: [mainGenreId], references: [id])

  mainProviderId String?
  mainProvider   MovieProvider?  @relation(name: "main_provider_for_movie", fields: [mainProviderId], references: [id])
  providers      MovieProvider[] @relation(name: "providers_for_movie")

  images           MovieImage[]
  WatchList        WatchList[]
  MovieTranslation MovieTranslation[]
  MovieCollection  MovieCollection[]
  genres           MovieGenre[]
  MovieProvider    MovieProvider[]
}

model MovieTranslation {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  title     String
  synopsis  String
  language  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  movieId   String
  movie     Movie    @relation(fields: [movieId], references: [id])
}

model MovieGenre {
  id      String @id @default(dbgenerated("gen_random_uuid()"))
  movieId String
  genreId Int
  movie   Movie  @relation(fields: [movieId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([movieId, genreId])
}

enum ImageType {
  POSTER
  BACKDROP
  STILL
}

model MovieImage {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  url       String    @unique
  type      ImageType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  movieId   String
  movie     Movie     @relation(fields: [movieId], references: [id])
}

model Genre {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  MovieGenre         MovieGenre[]
  ProviderMovieGenre ProviderMovieGenre[]
  locales            LocalizedGenre[]
  mainMovies         Movie[]
}

model LocalizedGenre {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  genreId   Int
  language  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  genre     Genre    @relation(fields: [genreId], references: [id])

  @@unique([genreId, language])
}

enum CollectionType {
  POPULAR
  TOP_RATED
  UPCOMING
  NOW_PLAYING
  TRENDING_DAILY
  TRENDING_WEEKLY
}

model MovieCollection {
  id        String         @id @default(dbgenerated("gen_random_uuid()"))
  type      CollectionType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  movieId   String
  movie     Movie          @relation(fields: [movieId], references: [id])

  @@unique([type, movieId])
}

// -----------------------------------------------------------
// Movie providers
// -----------------------------------------------------------
enum Provider {
  TMDB
  IMDB
  FANDANGO
}

model ProviderMovieGenre {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  provider   Provider
  externalID String
  genreId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  genre      Genre    @relation(fields: [genreId], references: [id])

  @@unique([externalID, provider])
}

model MovieProvider {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  movieId    String
  movie      Movie    @relation(name: "providers_for_movie", fields: [movieId], references: [id])
  provider   Provider
  externalId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  mainMovies Movie[]  @relation(name: "main_provider_for_movie")
  Movie      Movie[]

  @@unique([externalId, provider])
}
