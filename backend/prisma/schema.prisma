// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

// -----------------------------------------------------------
// User
// -----------------------------------------------------------
model AnonymousUser {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  devices   AnnonymousDevice[]
  watchList AnnonymousWatchList[]
}

model User {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username          String   @unique @db.Citext
  email             String   @unique @db.Citext
  hashedEmail       String   @unique
  name              String
  bio               String?
  url               String?
  countryCode       String?  @db.Citext
  phoneNumber       String?  @db.Citext
  hashedPhoneNumber String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  favoriteMovies    String[] @db.Uuid
  followerCount     Int      @default(0)
  followingCount    Int      @default(0)
  imageId           String?

  devices       Device[]
  watchList     WatchList[]
  following     Follow[]           @relation(name: "follower_user_id")
  followers     Follow[]           @relation(name: "following_user_id")
  phoneContacts PhoneContact[]
  emailContacts EmailContact[]
  notifications SentNotification[]
}

model AutheticationRequest {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique @db.Citext
  code      String
  createdAt DateTime @default(now())
}

model Follow {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  followerId  String   @db.Uuid
  followingId String   @db.Uuid
  createdAt   DateTime @default(now())
  follower    User     @relation(name: "follower_user_id", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  following   User     @relation(name: "following_user_id", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([followerId, followingId])
}

model Device {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId String     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  userId    String     @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token     PushToken?
}

enum TokenEnv {
  STAGING
  PRODUCTION
}

enum PushPlatform {
  IOS
  ANDROID
  WEB
}

model PushToken {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String
  env       TokenEnv
  platform  PushPlatform
  device    Device       @relation(fields: [device_id], references: [id], onDelete: Cascade)
  device_id String       @unique @db.Uuid
}

model AnnoymousPushToken {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String
  env       TokenEnv
  platform  PushPlatform
  device    AnnonymousDevice @relation(fields: [device_id], references: [id], onDelete: Cascade)
  device_id String           @unique @db.Uuid
}

model SentNotification {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String
  body           String
  idempotencyKey String?
  repeatLimit    Int?
  createdAt      DateTime @default(now())
  userId         String   @db.Uuid
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AnnonymousDevice {
  id        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId String              @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now())
  userId    String              @db.Uuid
  user      AnonymousUser       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token     AnnoymousPushToken?
}

model PhoneContact {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  countryCode String?  @db.Citext
  phoneNumber String   @db.Citext
  name        String
  externalId  String
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@unique([phoneNumber, userId, externalId])
}

model EmailContact {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String   @db.Citext
  name       String
  externalId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([email, userId, externalId])
}

// -----------------------------------------------------------
// Watch List
// -----------------------------------------------------------
model WatchList {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  movieId String @db.Uuid
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([movieId, userId])
}

model AnnonymousWatchList {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  movieId String @db.Uuid
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  userId String        @db.Uuid
  user   AnonymousUser @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([movieId, userId])
}

// -----------------------------------------------------------
// Movie metadata
// -----------------------------------------------------------
enum ContentType {
  MOVIE
  TV_SHOW
}

model Movie {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())
  releaseDate      DateTime?   @db.Date
  originalLanguage String
  originalTitle    String
  synopsis         String
  contentType      ContentType

  mainGenreId Int?
  mainGenre   Genre? @relation(fields: [mainGenreId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Providers
  tmdbId     Int?    @unique
  imdbId     String? @unique
  fandangoId String? @unique

  // Relations
  images              MovieImage[]
  WatchList           WatchList[]
  MovieTranslation    MovieTranslation[]
  MovieCollection     MovieCollection[]
  genres              MovieGenre[]
  AnnonymousWatchList AnnonymousWatchList[]
}

model MovieTranslation {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String
  synopsis           String
  language_ISO_639_1 String
  country_ISO_3166_1 String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  movieId            String   @db.Uuid
  movie              Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model MovieGenre {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  movieId String @db.Uuid
  genreId Int
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([movieId, genreId])
}

enum ImageType {
  POSTER
  BACKDROP
  STILL
}

model MovieImage {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url                String    @unique
  type               ImageType
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  language_ISO_639_1 String
  country_ISO_3166_1 String

  movieId String @db.Uuid
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum CollectionType {
  POPULAR
  TOP_RATED
  UPCOMING
  NOW_PLAYING
  TRENDING_DAILY
  TRENDING_WEEKLY
}

model MovieCollection {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      CollectionType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  movieId   String         @db.Uuid
  movie     Movie          @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([type, movieId])
}

// -----------------------------------------------------------
// Genres
// -----------------------------------------------------------
model Genre {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tmdbId Int? @unique

  MovieGenre MovieGenre[]
  locales    LocalizedGenre[]
  mainMovies Movie[]
}

model LocalizedGenre {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  genreId            Int
  language_ISO_639_1 String
  country_ISO_3166_1 String
  name               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  genre              Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([genreId, language_ISO_639_1, country_ISO_3166_1])
}
