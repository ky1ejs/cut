scalar Date
scalar URL

type Query {
  contentCollection(collection: Collection!): [Content!]!
  search(term: String!): [Content!]!
  searchUsers(term: String!): [Profile!]!
  watchList: [Content!]!
  ratings: [Content!]!
  content(id: String!): ExtendedContentResponse!

  contactMatches: [Profile!]!

  account: AccountUnion!
  isUsernameAvailable(username: String!): Boolean!
  sendTestPush: Boolean!
  imageUploadUrl: ImageUploadUrl!

  profileByUsername(username: String!): ProfileUnion!
  profileById(id: String!): ProfileUnion!
  profileFollow(id: String!, direction: FollowDirection!): [Profile!]!

  person(id: String!): ExtendedPerson!
  season(seriesId: String!, seasonNumber: Int!): ExtendedSeason!
  episode(seriesId: String!, seasonNumber: Int!, episodeNumber: Int!): ExtendedEpisode!

  # activityFeed: [Activity!]!
  # notifications: [Notification!]!
}

union ProfileUnion = Profile | CompleteAccount
union ExtendedContentUnion = ExtendedMovie | ExtendedTVShow

type ExtendedContentResponse {
  type: ContentType!
  result: ExtendedContentUnion!
}

type Mutation {
  initiateAuthentication(email: String!): String!
  validateAuthentication(id: String!, deviceName: String!, code: String!): AuthenticationResult!
  annonymousSignUp(deviceName: String!): Device!
  logOut: Boolean!
  completeAccount(params: CompleteAccountInput!): CompleteAccountResult!
  updateAccount(params: UpdateAccountInput!): CompleteAccount!
  setPushToken(token: PushTokenInput!): Boolean!
  profileImageUploadResponse(response: String!): CompleteAccount!
  generateDeleteAccountCode: String!
  deleteAccount(code: String!): Boolean!

  follow(userId: String!): Profile!
  unfollow(userId: String!): Profile!
  uploadContactNumbers(contacts: [ContactInput!]!): Boolean!
  uploadContactEmails(contacts: [ContactInput!]!): Boolean!

  addToWatchList(contentId: String!): WatchListMutationResult!
  removeFromWatchList(contentId: String!): WatchListMutationResult!
  rate(contentId: String!, rating: Int!): RatingResponse!
  removeRating(contentId: String!): Boolean!
}

union AccountUnion = IncompleteAccount | CompleteAccount

type EmptyResponse {
  success: Boolean!
}
union AuthenticationResult = CompleteAccountResult | EmptyResponse

input CompleteAccountInput {
  username: String!
  name: String!
  email: String!
  profileImageId: String
  bio: String
  code: String!
  authenticationId: String!
  deviceName: String!
}

input ContactInput {
  name: String!
  contactField: String!
  externalId: String!
}

input UpdateAccountInput {
  username: String
  phoneNumber: String
  name: String
  bio: String
  url: URL
  favoriteContent: [String!]
}

enum TokenEnv {
  STAGING
  PRODUCTION
}

enum PushPlatform {
  IOS
  ANDROID
  WEB
}

input PushTokenInput {
  token: String!
  platform: PushPlatform!
  env: TokenEnv!
}

interface ProfileInterface {
  id: String!
  username: String!
  name: String!
  bio_url: URL
  share_url: URL!
  bio: String
  imageUrl: URL
  favoriteContent: [Content!]!
  watchList: [Content!]!
  ratings: [ContentRating!]!
  followerCount: Int!
  followingCount: Int!
  followers: [Profile!]!
  following: [Profile!]!
  isCurrentUser: Boolean!
}

type Profile implements ProfileInterface {
  # ProfileInterface
  id: String!
  username: String!
  name: String!
  bio_url: URL
  share_url: URL!
  bio: String
  imageUrl: URL
  favoriteContent: [Content!]!
  watchList: [Content!]!
  ratings: [ContentRating!]!
  followerCount: Int!
  followingCount: Int!
  followers: [Profile!]!
  following: [Profile!]!
  isCurrentUser: Boolean!

  isFollowing: Boolean!
}

type IncompleteAccount {
  id: String!
  watchList: [Content!]!
  ratings: [Content!]!
}

type CompleteAccount implements ProfileInterface {
  # ProfileInterface
  id: String!
  username: String!
  name: String!
  bio_url: URL
  share_url: URL!
  bio: String
  imageUrl: URL
  favoriteContent: [Content!]!
  watchList: [Content!]!
  ratings: [ContentRating!]!
  followerCount: Int!
  followingCount: Int!
  followers: [Profile!]!
  following: [Profile!]!
  isCurrentUser: Boolean!

  phoneNumber: String
}

type CompleteAccountResult {
  completeAccount: CompleteAccount!
  updatedDevice: Device!
}

type WatchListMutationResult {
  success: Boolean!
  id: String!
}

enum Collection {
  POPULAR
  TOP_RATED
  UPCOMING
  NOW_PLAYING
  TRENDING_DAILY
  TRENDING_WEEKLY
}

type Device {
  name: String!
  session_id: String!
}

enum ContentType { 
  TV_SHOW
  MOVIE
}

interface ContentInterface {
  id: String!
  title: String!
  poster_url: URL
  releaseDate: Date
  mainGenre: Genre
  genres: [Genre!]!
  isOnWatchList: Boolean!
  allIds: [String!]!
  url: URL!
  type: ContentType!
  currentUserRating: Int
  followingRatings: [UserRating!]!
}

# When you already know what the content is, you just need who rated it and what
type UserRating {
  user: Profile!
  rating: Float!
}

# When you already know who the user is, you need the content that's rated
type ContentRating {
  content: Content!
  rating: Float!
}

type Content implements ContentInterface {
  id: String!
  title: String!
  poster_url: URL
  releaseDate: Date
  mainGenre: Genre
  genres: [Genre!]!
  isOnWatchList: Boolean!
  allIds: [String!]!
  url: URL!
  type: ContentType!
  currentUserRating: Int
  followingRatings: [UserRating!]!
}

interface ExtendedContentInterface {
  overview: String!
  cast: [Person!]!
  crew: [Person!]!
  watchProviders: [WatchProvider!]!
  userRating: Float!
  trailer: Trailer
}

type ExtendedMovie implements ContentInterface & ExtendedContentInterface {
  # ContentInterface fields
  id: String!
  title: String!
  poster_url: URL
  releaseDate: Date
  mainGenre: Genre
  genres: [Genre!]!
  isOnWatchList: Boolean!
  allIds: [String!]!
  url: URL!
  type: ContentType!
  currentUserRating: Int
  followingRatings: [UserRating!]!

  # ExtendedContentInterface fields
  overview: String!
  cast: [Person!]!
  crew: [Person!]!
  watchProviders: [WatchProvider!]!
  userRating: Float!
  trailer: Trailer

  # ExtendedMovie fields
  backdrop_url: URL!
  runtime: Int!
  productionCountries: [ProductionCountry!]!
  director: Person!
}

type ProductionCountry {
  iso_3166_1: String!
  name: String!
  emoji: String!
}

type WatchProvider {
  provider_id: Int!
  provider_name: String!
  logo_url: URL!
  link: URL!
  accessModels: [AccessModel!]!
}

enum AccessModel {
  BUY
  RENT
  STREAM
}

interface PersonInterface {
  id: String!
  name: String!
  imageUrl: URL
  share_url: URL!
}

type Person implements PersonInterface {
  id: String!
  name: String!
  imageUrl: URL
  share_url: URL!

  role: String!
}

type Work implements ContentInterface {
  id: String!
  title: String!
  poster_url: URL
  releaseDate: Date
  mainGenre: Genre
  genres: [Genre!]!
  isOnWatchList: Boolean!
  allIds: [String!]!
  url: URL!
  type: ContentType!
  currentUserRating: Int
  followingRatings: [UserRating!]!

  role: String!
}

type ExtendedPerson implements PersonInterface {
  id: String!
  name: String!
  imageUrl: URL
  share_url: URL!

  biography: String!
  birthday: Date
  deathday: Date
  placeOfBirth: String
  knownFor: String!
  works: [Work!]!
}

type Genre {
  id: Int!
  name: String!
}

type GenreMetadata {
  name: String!
}

type ExtendedTVShow implements ContentInterface & ExtendedContentInterface {
  # ContentInterface fields
  id: String!
  title: String!
  poster_url: URL
  releaseDate: Date
  mainGenre: Genre
  genres: [Genre!]!
  isOnWatchList: Boolean!
  allIds: [String!]!
  url: URL!
  type: ContentType!
  currentUserRating: Int
  followingRatings: [UserRating!]!

  # ExtendedContentInterface fields
  overview: String!
  cast: [Person!]!
  crew: [Person!]!
  watchProviders: [WatchProvider!]!
  userRating: Float!
  trailer: Trailer

  # ExtendedTVShow fields
  seasons: [Season!]!
  seasonCount: Int!
  episodeCount: Int!
}

type Trailer {
  url: URL!
  thumbnail_url: URL!
}

interface SeasonInterface {
  id: String!
  name: String!
  overview: String!
  season_number: Int!
  episode_count: Int!
  air_date: Date
  poster_url: URL
}

type Season implements SeasonInterface {
  id: String!
  name: String!
  overview: String!
  season_number: Int!
  episode_count: Int!
  air_date: Date
  poster_url: URL
}

type SeasonRole {
  id: String!
  role: String!
  episodeCount: Int!
}

type SeasonPerson implements PersonInterface {
  id: String!
  name: String!
  imageUrl: URL
  share_url: URL!

  roles: [SeasonRole!]!
}

type ExtendedSeason implements SeasonInterface {
  id: String!
  name: String!
  overview: String!
  season_number: Int!
  episode_count: Int!
  air_date: Date
  poster_url: URL

  episodes: [Episode!]!
  cast: [SeasonPerson!]!
  crew: [SeasonPerson!]!
}

interface EpisodeInterface {
  id: String!
  name: String!
  overview: String!
  season_number: Int!
  episode_number: Int!
  air_date: Date
  still_url: URL!
  runtime: Int
}

type Episode implements EpisodeInterface {
  id: String!
  name: String!
  overview: String!
  season_number: Int!
  episode_number: Int!
  air_date: Date
  still_url: URL!
  runtime: Int
}

type ExtendedEpisode implements EpisodeInterface {
  id: String!
  name: String!
  overview: String!
  season_number: Int!
  episode_number: Int!
  air_date: Date
  still_url: URL!
  runtime: Int

  crew: [Person!]!
  cast: [Person!]!
  guestStars: [Person!]!
  stills: [URL!]!
}

type Header {
  key: String!
  value: String!
}

type ImageUploadUrl {
  url: URL!
  fileName: String!
  headers: [Header!]!
}

enum FollowDirection {
  FOLLOWER
  FOLLOWING
}

type RatingResponse {
  content: Content!
  extendedContent: ExtendedContentUnion!
}