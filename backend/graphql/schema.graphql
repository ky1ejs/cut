type Query {
  movies(collection: Collection!): [Movie!]!
  search(term: String!): [Movie!]!
  watchList: [Movie!]!
  movie(id: String!): ExtendedMovie!

  account: AccountUnion!
  isUsernameAvailable(username: String!): Boolean!
  initiateEmailVerification(email: String!): Boolean!

  # activityFeed: [Activity!]!
  # notifications: [Notification!]!
}

type Mutation {
  signUp(deviceName: String!): Device!
  logIn(username: String!, password: String!): Device!
  completeAccount(params: CompleteAccountInput!): CompleteAccountResult!

  follow(userId: String!): Boolean!
  unfollow(userId: String!): Boolean!

  addToWatchList(movieId: String!): WatchListMutationResult!
  removeFromWatchList(movieId: String!): WatchListMutationResult!
}

union AccountUnion = IncompleteAccount | CompleteAccount

input CompleteAccountInput {
  username: String!
  name: String!
  password: String!
  emailToken: String!
}

interface Account {
  id: String!
  watchList: [Movie!]!
}

type IncompleteAccount implements Account {
  # Account
  id: String!
  watchList: [Movie!]!
}

type OtherAccount {
  id: String!
  username: String!
  profileUrl: String
}

type CompleteAccount {
  # Account
  id: String!
  watchList: [Movie!]!

  username: String!
  name: String!
  bio: String
  url: String
  followers: [OtherAccount!]!
  following: [OtherAccount!]!
  followerCount: Int!
  followingCount: Int!
}

type CompleteAccountResult {
  completeAccount: CompleteAccount!
  updatedDevice: Device!
}

type WatchListMutationResult {
  success: Boolean!
  id: String!
}

enum Collection {
  POPULAR
  TOP_RATED
  UPCOMING
  NOW_PLAYING
  TRENDING_DAILY
  TRENDING_WEEKLY
}

type Device {
  name: String!
  session_id: String!
}

interface MovieInterface {
  id: String!
  title: String!
  poster_url: String!
  release_date: String
  mainGenre: Genre
  genres: [Genre!]!
  isOnWatchList: Boolean!
}

type Movie implements MovieInterface {
  id: String!
  title: String!
  poster_url: String!
  release_date: String
  mainGenre: Genre
  genres: [Genre!]!
  isOnWatchList: Boolean!
}

type ExtendedMovie implements MovieInterface {
  # MovieInterface fields
  id: String!
  title: String!
  poster_url: String!
  release_date: String
  mainGenre: Genre
  genres: [Genre!]!
  isOnWatchList: Boolean!

  # ExtendedMovie fields
  overview: String!
  backdrop_url: String!
  runtime: Int!
  watchProviders: WatchProviders!
  cast: [Actor!]!
  crew: [Person!]!
  userRating: Float!
  productionCountries: [ProductionCountry!]!
  trailerUrl: String
  director: Person!
}

type ProductionCountry {
  iso_3166_1: String!
  name: String!
  emoji: String!
}

type WatchProviders {
  stream: [WatchProvider!]!
  rent: [WatchProvider!]!
  buy: [WatchProvider!]!
}

type WatchProvider {
  provider_id: Int!
  provider_name: String!
  logo_url: String!
  link: String!
}

enum PersonRole {
  DIRECTOR
  WRITER
  EXECUTIVE_PRODUCER
  PRODUCER
}

interface PersonInterface {
  id: String!
  name: String!
  profile_url: String
}

type Person implements PersonInterface {
  id: String!
  name: String!
  profile_url: String

  role: PersonRole!
}

type Actor implements PersonInterface {
  id: String!
  name: String!
  profile_url: String

  character: String!
}

type Genre {
  id: Int!
  name: String!
}

type GenreMetadata {
  name: String!
}

